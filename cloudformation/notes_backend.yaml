AWSTemplateFormatVersion: 2010-09-09
Description: Backend infrastructure for the notes-api-v2 backend.
Parameters:
  AvailabilityZoneA:
    Type: String
    Default: ca-central-1a
    AllowedValues:
      - ca-central-1a
      - ca-central-1b
      - ca-central-1c
      - ca-central-1d
    Description: An availability zone for one of the subnets used for the stack

  AvailabilityZoneB:
    Type: String
    Default: ca-central-1b
    AllowedValues:
      - ca-central-1a
      - ca-central-1b
      - ca-central-1c
      - ca-central-1d
    Description: An availability zone for one of the subnets used for the stack

  ApiPort:
    Type: Number
    Default: 3000
    Description: The port the api is exposed on

  LoadBalancerPort:
    Type: Number
    Default: 80
    Description: The port the load balancer is exposed on

  ContainerCpu:
    Type: Number
    Default: 256
    Description: The cpu value to give to the api container

  ContainerMemory:
    Type: Number
    Default: 512
    Description: The memory value to give to the api container

  ContainerName:
    Type: String
    Default: notes-api-v2
    Description: The name of the api container definition

Resources:
  ## VPC
  NotesBackendVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  NotesBackendInternetGateway:
    Type: AWS::EC2::InternetGateway

  NotesBackendVpcIgAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref NotesBackendInternetGateway
      VpcId: !Ref NotesBackendVpc

  NotesBackendPublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all inbound and outbound traffic from the internet
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      VpcId: !Ref NotesBackendVpc

  NotesBackendPrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all inbound and outbound traffic from public subnets
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref NotesBackendPublicSecurityGroup
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
      VpcId: !Ref NotesBackendVpc

  ## Public Subnets
  NotesApiLoadBalancerSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: true
      VpcId: !Ref NotesBackendVpc

  NotesApiLoadBalancerSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: true
      VpcId: !Ref NotesBackendVpc

  ## Private Subnets
  NotesApiSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: false
      VpcId: !Ref NotesBackendVpc

  NotesApiSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.22.0/24
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: false
      VpcId: !Ref NotesBackendVpc

  # Elastic IPs
  NotesApiElasticIpA:
    Type: AWS::EC2::EIP
    DependsOn:
      - NotesBackendVpcIgAttachment
    Properties:
      Domain: vpc

  NotesApiElasticIpB:
    Type: AWS::EC2::EIP
    DependsOn:
      - NotesBackendVpcIgAttachment
    Properties:
      Domain: vpc

  ## Nat Gateways
  NotesApiNatA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NotesApiElasticIpA.AllocationId
      SubnetId: !Ref NotesApiLoadBalancerSubnetA

  NotesApiNatB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NotesApiElasticIpB.AllocationId
      SubnetId: !Ref NotesApiLoadBalancerSubnetB

  ## Public route tables and routing
  NotesBackendPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NotesBackendVpc

  NotesBackendDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - NotesBackendVpcIgAttachment
    Properties:
      RouteTableId: !Ref NotesBackendPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NotesBackendInternetGateway

  NotesApiLoadBalancerSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NotesBackendPublicRouteTable
      SubnetId: !Ref NotesApiLoadBalancerSubnetA

  NotesApiLoadBalancerSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NotesBackendPublicRouteTable
      SubnetId: !Ref NotesApiLoadBalancerSubnetB

  ## Private route tables and routing
  NotesBackendPrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NotesBackendVpc

  NotesApiPrivateRouteA:
    Type: AWS::EC2::Route
    DependsOn:
      - NotesBackendVpcIgAttachment
    Properties:
      RouteTableId: !Ref NotesBackendPrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NotesApiNatA

  NotesApiRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NotesBackendPrivateRouteTableA
      SubnetId: !Ref NotesApiSubnetA

  NotesBackendPrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NotesBackendVpc

  NotesApiPrivateRouteB:
    Type: AWS::EC2::Route
    DependsOn:
      - NotesBackendVpcIgAttachment
    Properties:
      RouteTableId: !Ref NotesBackendPrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NotesApiNatB

  NotesApiRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NotesBackendPrivateRouteTableB
      SubnetId: !Ref NotesApiSubnetB

  ## ECS IAM
  NotesApiEcrRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: EcsEcrRepositoryPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  ## ALB
  NotesApiLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - NotesBackendVpcIgAttachment
    Properties:
      IpAddressType: ipv4
      Name: notes-api-load-balancer
      Scheme: internet-facing
      Subnets:
        - !Ref NotesApiLoadBalancerSubnetA
        - !Ref NotesApiLoadBalancerSubnetB
      Type: application
      SecurityGroups:
        - !Ref NotesBackendPublicSecurityGroup

  NotesApiLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - NotesApiLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      TargetType: ip
      Name: notes-api-lb-target-group
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref NotesBackendVpc
      Port: !Ref ApiPort

  NotesApiLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NotesApiLoadBalancerTargetGroup
      LoadBalancerArn: !Ref NotesApiLoadBalancer
      Port: !Ref LoadBalancerPort
      Protocol: HTTP

  ## ECS
  NotesApiEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: notes-api-ecs-cluster

  NotesApiLogGroup:
    Type: AWS::Logs::LogGroup

  NotesApiEcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt NotesApiEcrRole.Arn
      ContainerDefinitions:
        - Image: 844544735981.dkr.ecr.ca-central-1.amazonaws.com/notes-api-v2-ecr:latest #TODO hide acc id / take as param
          Name: !Ref ContainerName
          PortMappings:
            - ContainerPort: !Ref ApiPort
          Environment:
            - Name: HELLO_WORLD_MODE
              Value: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref NotesApiLogGroup
              awslogs-region: ca-central-1
              awslogs-stream-prefix: notes-api

  NotesApiEcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref NotesApiEcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 10
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref NotesApiSubnetA
            - !Ref NotesApiSubnetB
          SecurityGroups:
            - !Ref NotesBackendPrivateSecurityGroup
      SchedulingStrategy: REPLICA
      ServiceName: notes-api-ecs-service
      TaskDefinition: !Ref NotesApiEcsTaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: !Ref ApiPort
          TargetGroupArn: !Ref NotesApiLoadBalancerTargetGroup
